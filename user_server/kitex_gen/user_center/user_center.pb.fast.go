// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package user_center

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	common "user_server/kitex_gen/common"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *LoginReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *LoginRsp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LoginRsp[number], err)
}

func (x *LoginRsp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Code = common.ErrorCode(v)
	return offset, nil
}

func (x *LoginRsp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRsp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRsp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRsp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ServerAddr, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRsp) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.ServerPort, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *LoginReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *LoginRsp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *LoginRsp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetCode()))
	return offset
}

func (x *LoginRsp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *LoginRsp) fastWriteField3(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetId())
	return offset
}

func (x *LoginRsp) fastWriteField4(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetName())
	return offset
}

func (x *LoginRsp) fastWriteField5(buf []byte) (offset int) {
	if x.ServerAddr == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetServerAddr())
	return offset
}

func (x *LoginRsp) fastWriteField6(buf []byte) (offset int) {
	if x.ServerPort == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, x.GetServerPort())
	return offset
}

func (x *LoginReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *LoginRsp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *LoginRsp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetCode()))
	return n
}

func (x *LoginRsp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *LoginRsp) sizeField3() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetId())
	return n
}

func (x *LoginRsp) sizeField4() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetName())
	return n
}

func (x *LoginRsp) sizeField5() (n int) {
	if x.ServerAddr == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetServerAddr())
	return n
}

func (x *LoginRsp) sizeField6() (n int) {
	if x.ServerPort == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, x.GetServerPort())
	return n
}

var fieldIDToName_LoginReq = map[int32]string{}

var fieldIDToName_LoginRsp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Id",
	4: "Name",
	5: "ServerAddr",
	6: "ServerPort",
}

var _ = common.File_proto_common_proto
